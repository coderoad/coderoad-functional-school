{
  "project": {
    "title": "Functional School",
    "description": "A trip through functional programming in Javascript."
  },
  "chapters": [
    {
      "title": "Array Methods",
      "pages": [
        {
          "title": "Sort",
          "description": "Array -> sorted Array",
          "explanation": "Your grades are filtered down to your name and good scores - but wouldn't it be better if your best grades were shown at the top? Besides, your parents rarely read all the way down to the bottom.\n\nWe can use the array method `sort` to arrange our data. Let's see how it works.\n\n```js\n['c', 'b', 'a'].sort();\n//> ['a', 'b', 'c']\n\n[3, 2, 1].sort();\n//> [1, 2, 3]\n```\n\nBut what about sorting the scores inside of an object? We can write a custom `compareScore` function.\n\nA sort function takes two params, and compares the first to the second. It should return values saying where the second value should go:\n\n  * -1 : sort to a lower index\n  * 1 : sort to a higher index\n  * 0 : stay the same\n\nAlright, now time to sort your best grades to the top.",
          "tasks": [
            {
              "description": "Write a sort condition function called `compareScore` that can sort your data by score.",
              "tests": [
                "1/02/01-sort"
              ],
              "actions": [
                "open('02-sort.js')",
                "set('function compareScore(a, b) {\n  switch (true) {\n    case b < a:\n    // it should return 1 if b's score is less than a's\n      return;\n    case b > a:\n    // it should return -1 if b's score is more than a's\n      return;\n    default:\n    // it should return 0 if b has the same score as a\n      return;\n  }\n}\n')"
              ]
            },
            {
              "description": "Set `mySortedGrades` to `myBest` data sorted with `compareScore`",
              "tests": [
                "1/02/01-sort"
              ],
              "actions": [
                "insert('// use the compare function to sort myBest\nvar mySorted = myBest\n')"
              ]
            }
          ]
        },
        {
          "title": "Map",
          "description": "Array -> run a function over each item -> Array",
          "explanation": "You've filtered and sorted our data, but wouldn't it be better if you could change your grades? You can use the array method `map` to run a function that returns changes to your data.\n\n```\nfunction addOne(num) {\n  return num + 1;\n}\n\nfunction addTwo(num) {\n  return num + 2;\n}\n\n[1, 2, 3].map(addOne);\n//> [2, 3, 4]\n\n[1, 2, 3].map(addOne).map(addTwo);\n//> [4, 5, 6]\n```\n\nThose D & F's would look a lot better if they suddenly became A's. Let's go back before we filtered out the bad grades.",
          "tasks": [
            {
              "description": "Make a function `changeGrades` that takes student data and changes the grade to \"A\" if it is a \"D\" or \"F\".",
              "tests": [
                "1/03/map-01"
              ],
              "actions": [
                "open('03-map.js')",
                "set('  myGoodGrades = myData.filter() // TODO\n')",
                "insert('myData.\n\nfunction changeGrades(name) {\n    // filter to name\n    // map over grades and change them to an A\n}\n\n')"
              ]
            },
            {
              "description": "Work in Progress. Unfinished.",
              "tests": [
                "1/03/map-02"
              ]
            }
          ]
        },
        {
          "title": "forEach",
          "description": "Array -> run a function for each item"
        },
        {
          "title": "find",
          "description": "Array -> find an item that matches a condition"
        },
        {
          "title": "concat",
          "description": "Array + Array -> Array"
        },
        {
          "title": "reduce",
          "description": "Array -> transform into anything"
        },
        {
          "title": "Challenge 1",
          "description": "coming soon"
        },
        {
          "title": "Challenge 2",
          "description": "coming soon"
        }
      ],
      "description": "Using common built-in Javascript array methods such as `map` & `reduce`.\n\nBy the end, you should have an understanding of how to use array methods to manipulate semi-complex data.\n\n<!-- @import('./tutorial/1/01/filter') -->"
    }
  ]
}