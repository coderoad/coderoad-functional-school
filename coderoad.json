{
  "project": {
    "title": "Functional School",
    "description": "A trip through functional programming in Javascript."
  },
  "chapters": [
    {
      "title": "Array Methods",
      "pages": [
        {
          "title": "Filter",
          "description": "Array -> Array of items that match a condition",
          "explanation": "You've hacked into the school's computer system, and just in time. The grades are in, aren't you're not too proud of your performance. But that's okay, you have a plan: you're going to create a fake report card.\n\nIt would be great if you could `filter` the scores that your parents will see. A `filter` takes a matching condition function and only returns items that result in true. As an example, look at `isA` below:\n\n```\nfunction isA(x) {\n  return x === 'a';\n}\n```\n\n\nLike all of the methods in this chapter, `filter` is already part of the `Array.prototype`, so you can run it following any array. Each item in the array is passed into the params of the condition function, one by one.\n\n```\nvar list = ['a', 'b'];\nlist.filter(isA);\n\n// if isA(list[0]), add to output array\n// if isA(list[1]), add to output array\n//\n//> ['a']\n```\n\nIf your data was composed of objects, we could use dot notation to find matches. Checkout `isB` below.\n\n```\nfunction isB(x) {\n  return x.item === 'b'\n}\n\nvar list = [{item: 'a'}, {item: 'b'}];\nlist.filter(isB);\n//> [{item: 'b'}]\n```\n\nWhere were we? Back to filtering our grades.\n\nThere's too much student data in the computer system. We'll have to sort through it. Have a look at an example below:\n\n```\nconsole.log(data[0]);\n//> { course: 'Web Security',\n//    instructor: 'Sue Denim',\n//    name: 'Rebecca Heineman',\n//    score: 93,\n//    grade: 'A' }\n```",
          "tasks": [
            {
              "description": "Write a filter condition function called `isAda` that returns true only if the name matches your name: \"Ada Lovelace\".",
              "tests": [
                "1/01/01-filter"
              ],
              "actions": [
                "open('01-filter.js')",
                "set('function isAda(x) {\n  // write condition here\n  // the name must match \"Ada Lovelace\"\n\n}\n')"
              ]
            },
            {
              "description": "Set `var myData` equal to data matching your name, \"Ada Lovelace\".",
              "tests": [
                "1/01/02-filter"
              ],
              "actions": [
                "insert('/**\n * Data is set as a global. Example:\n * [{\n * \"course\": \"Relational Databases\",\n * \"instructor\": \"Sean Quentin Lewis\",\n * \"name\": \"Ada Lovelace\",\n * \"score\": 91,\n * \"grade\": \"A\"\n * },\n * ...\n * ]\n */\n')",
                "insert('// call filter condition here\nvar myData = data.filter();\n\n')"
              ]
            },
            {
              "description": "Write a filter condition called `isGoodGrade` that will filter out any \"D\" or \"F\" grades.",
              "tests": [
                "1/01/03-filter"
              ],
              "actions": [
                "insert('// return true if student \"grade\" is not a \"D\" or \"F\"\nfunction isGoodGrade() {\n\n}\n')"
              ]
            },
            {
              "description": "Set `var myBest` to your scores, excluding any grades that are \"D\" or \"F\".",
              "tests": [
                "1/01/04-filter"
              ],
              "actions": [
                "insert('// filter out \"D\"'s and \"F\"'s here\nvar myBest = myData.filter();\n\n')"
              ]
            }
          ]
        },
        {
          "title": "Sort",
          "description": "Array -> sorted Array",
          "explanation": "Your grades are filtered down to your name and good scores - but wouldn't it be better if your best grades were shown at the top? Besides, your parents rarely read all the way down to the bottom.\n\nWe can use the array method `sort` to arrange our data. Let's see how it works.",
          "tasks": [
            {
              "description": "Write a sort condition function called `sortByScore` that can sort your data by score.",
              "tests": [
                "1/02/01-sort"
              ],
              "actions": [
                "open('02-sort.js')",
                "set('function sortByScore(a, b) {\n  // it should return -1 a's score is bigger than b's\n\n  // it should return 1 if a's score is less than b's\n\n  // it should return 0 if a has the same score as b\n\n}\n')"
              ]
            }
          ]
        },
        {
          "title": "Map",
          "description": "Array -> run a function over each item -> Array",
          "explanation": "```\n[1, 2, 3].map(function(num) {\n  return num + 1;\n});\n// [2, 3, 4]\n```\n\nNow that we've filtered down our data, let's make some changes. Those D & F's would look a lot better if they suddenly became A's.",
          "tasks": [
            {
              "description": "Make a function `changeGrades` that that takes a name and changes all of that person's grades to an A",
              "tests": [
                "1/02/map-01"
              ],
              "actions": [
                "open('02-map.js')",
                "set('var data = [\n  { name: \"Joe\", class: \"Computer Science\", grade: \"C\" },\n  { name: \"Jane\", class: \"Computer Science\", grade: \"D\" },\n  { name: \"Mo\", class: \"Computer Science\", grade: \"B\" },\n  { name: \"Bob\", class: \"Computer Science\", grade: \"F\" },\n  { name: \"Joe\", class: \"Math\", grade: \"C\" },\n  { name: \"Jane\", class: \"Math\", grade: \"B\" },\n  { name: \"Mo\", class: \"Math\", grade: \"D\" },\n  { name: \"Bob\", class: \"Math\", grade: \"A\" },\n  { name: \"Joe\", class: \"Art\", grade: \"C\" },\n  { name: \"Jane\", class: \"Art\", grade: \"F\" },\n  { name: \"Mo\", class: \"Art\", grade: \"B\" },\n  { name: \"Bob\", class: \"Math\", grade: \"F\" }\n];\n')",
                "insert('function changeGrades(name) {\n    // filter to name\n    // map over grades and change them to an A\n}\n\n')"
              ]
            },
            {
              "description": "Work in Progress. Unfinished.",
              "tests": [
                "1/02/map-02"
              ]
            }
          ]
        },
        {
          "title": "forEach",
          "description": "Array -> run a function for each item"
        },
        {
          "title": "find",
          "description": "Array -> find an item that matches a condition"
        },
        {
          "title": "concat",
          "description": "Array + Array -> Array"
        },
        {
          "title": "reduce",
          "description": "Array -> transform into anything"
        },
        {
          "title": "Challenge 1",
          "description": "coming soon"
        },
        {
          "title": "Challenge 2",
          "description": "coming soon"
        }
      ],
      "description": "Using common built-in Javascript array methods such as `map` & `reduce`.\n\nBy the end, you should have an understanding of how to use array methods to manipulate semi-complex data."
    }
  ]
}