{
  "project": {
    "title": "Functional School",
    "description": "A trip through functional programming in Javascript."
  },
  "chapters": [
    {
      "title": "Array Methods",
      "pages": [
        {
          "title": "forEach",
          "description": "Array -> run a function for each item",
          "explanation": "You've updated your grades, but they're still in an array. It's time to loop over them and log them to the console.\n\n`forEach` has a lot in common with `map`, but the major differences between the two is important to understand the difference between \"functional\" & \"imperative\" programming.\n\n> Imperative programming describes the order of actions\n\n> Functional programming describes the data transformation\n\nFunctional programming is a lot like math. As in math, 1 + 1 always equals 2.\n\nIn the same way, a \"pure\" function will always have the same result from a given input. Input 1, output 2. Every time.\n\n```js\n// a pure function\nfunction addOne(x) {\n  return x + 1;\n}\naddOne(1)\n//> 2\naddOne(1)\n//> 2\n```\n\nA function is \"pure\" if it doesn't change anything outside of its scope. Pure functions are easy to test, reuse and reason about. On the other hand, \"impure\" functions are less predictable.\n\n```js\nvar y = 1;\n// impure function\nfunction increment(x) {\n  y += x;\n  return y;\n}\nincrement(1)\n//> 2\nincrement(1)\n//> 3\n```\n\nIt's good practice to ensure your `map` functions remain pure.\n\nBut `forEach` can be a little more dangerous. Why? Let's have a look.\n\n```js\n[1, 2, 3].map(addOne);\n//> [2, 3, 4]\n//\n[1, 2, 3].forEach(addOne);\n//> undefined\n```\n\nWhat? `undefined`? `forEach` runs a function on each item in the array, and doesn't care what the function returns. The function must make changes, called \"side effects\", to even be noticed.\n\n```js\n// impure function, changes log\nfunction addOneToLog(x) {\n  console.log(x);\n}\n\n[1, 2, 3].forEach(addOneToLog);\n//> 2\n//> 3\n//> 4\n```",
          "tasks": [
            {
              "description": "Use `forEach` to log out your report card to the console",
              "tests": [
                "1/04/01-forEach"
              ],
              "actions": [
                "open('04-forEach.js')",
                "set('function logCourse(course) {\n  console.log(`${course.grade}  ${course.score}  ${course.title}`);\n}\n\n// log your grades to the console\nmyFixed.forEach();\n')"
              ]
            },
            {
              "description": "Run `myFixed.forEach` on a second function called `logCourseWithIndex` which looks like `logCourse` but takes a second parameter called index.",
              "tests": [
                "1/04/02-forEach"
              ],
              "actions": [
                "insert('\nfunction logCourseWithIndex(course, index) {\n  console.log(`${index + 1}  ${course.grade}  ${course.score}  ${course.title}`);\n}\n\n// log your grades to the console with an index\nmyFixed.forEach();\n')"
              ]
            },
            {
              "description": "Where does this second parameter come from? Array methods actually have two extra parameters: the index, and the entire array. Run `myFixed.forEach` with `logCourseWithIndexAndArray`.",
              "tests": [
                "1/04/03-forEach"
              ],
              "actions": [
                "insert('\nfunction logCourseWithIndexAndArray(course, index, array) {\n  console.log(`${index + 1}/${array.length}  ${course.grade}  ${course.score}  ${course.title}`);\n}\n\n// log your grades to the console with an index and array length\nmyFixed.forEach();\n')"
              ]
            },
            {
              "description": "What??? Your data has all disappeared? It seems `myFixed` relies on a chain of methods.\n```js\nmyFixed = students\n    .filter(isAda)\n    .sort(compareScore)\n    .map(increaseScore)\n    .map(getGrade)\n    .forEach(logCourseWithIndexAndArray)\n```\n\nThis is why side-effects are dangerous. Students data must have changed, and now all of your transformations are effected.\n\nSomething strange is going on. In the next step we'll try to `find` your data.",
              "tests": [
                "1/04/04-forEach"
              ]
            }
          ]
        },
        {
          "title": "find",
          "description": "Array -> find an item that matches a condition",
          "tasks": [
            {
              "description": "`find` the name that isn't in the list of known students",
              "tests": [
                "1/05/01-find"
              ]
            },
            {
              "description": "`filter` down to students without known names",
              "tests": [
                "1/05/02-find"
              ]
            },
            {
              "description": "`map` over the result to get only the `name` property",
              "tests": [
                "1/05/03-find"
              ]
            },
            {
              "description": "`join('')` the array of names to output result",
              "tests": [
                "1/05/04-find"
              ]
            }
          ]
        },
        {
          "title": "concat",
          "description": "Array + Array -> Array",
          "tasks": [
            {
              "description": "`filter` down \"Hack Kerr\"'s data",
              "tests": [
                "1/06/01-concat"
              ]
            },
            {
              "description": "`concat` two more suspects to the suspect list, \"Kevin Mitnick\" & \"Albert Gonzalez\"",
              "tests": [
                "1/06/02-concat"
              ]
            },
            {
              "description": "create a `concatAll` array method",
              "tests": [
                "1/06/03-concat"
              ]
            },
            {
              "description": "Use `concatAll` to put all data into a single array",
              "tests": [
                "1/06/04-concat"
              ]
            }
          ]
        },
        {
          "title": "reduce",
          "description": "Array -> transform into anything",
          "tasks": [
            {
              "description": "Use `reduce` to calculate the class average",
              "tests": [
                "1/07/01-reduce"
              ]
            },
            {
              "description": "`reduce` to suspect scores",
              "tests": [
                "1/07/02-reduce"
              ]
            },
            {
              "description": "`map` over suspect data to find the score differences",
              "tests": [
                "1/07/03-reduce"
              ]
            },
            {
              "description": "`reduce` down to likely suspect names",
              "tests": [
                "1/07/04-reduce"
              ]
            }
          ]
        },
        {
          "title": "Challenge 1",
          "description": "coming soon"
        },
        {
          "title": "Challenge 2",
          "description": "coming soon"
        }
      ],
      "description": "Using common built-in Javascript array methods such as `map` & `reduce`.\n\nBy the end, you should have an understanding of how to use array methods to manipulate semi-complex data.\n\n<!-- @import('./tutorial/1/01/filter') -->\n<!-- @import('./tutorial/1/02/sort') -->\n<!-- @import('./tutorial/1/03/map') -->"
    }
  ]
}